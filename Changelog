Version 0.4.0

Breaking change: runtime/vre.rb changed to runtime/vsr.rb

Breaking change: compiler/vishc.rb must have -o outputfile to
  actually perform the file.
  This is represented in compile/Rakefile for rule. Now uses the internal
  compile and compose methods.

Version 0.2.0
Added:
Executable blocks. Can be saved in variables and run again with '%' sigil.
E.g. 
bk={ 1 + 2}
%bk

Added loops.
E.g.
val=0; loop { val=:val + 1; (:val == 10) && break }; :val
# => 10
Added keywords break, exit and return [ ... expression]
Exit invokes the exit interrupt handler. Which justcauses the :exit opcode to run.
Like the :halt opcode, but uses a descendent class ExitState.
This can be queried with CodeInterperter.last_exception

Git tags:
Turing.complete


Version 0.1.0
Git tags:

AST:

Implemented actual Abstract Syntax Tree using rubytree gem.
Cleaned up interp.rb to code_interperter.rb
Added debug support in pry_helper.rb. go method returns CodeInterperter.
  for_broke(ci) will run the entire thing. E.g. for_broke(go)
  one: method to run one fetch, decode and execute step.
  what_is: given code from fetch, prints Human  readable value.


working.example:

First attempt. 
Using interp.rb to pull the bytecodes and then run them given ByteCodes, Context.
Main code in main.rb: Loads source, compiles and runs it in interp method.
The parse method just returns 1 dimensional array of bytecodes.
The opcodes method returns hash of bytecode to lambdas that
  take ByteCodes, Context and manipulate the stack in  Context.stack.