#!/usr/bin/env ruby
# ivs.erb - template for compiler output to  ivs executable
# 

require 'optparse'
require_relative '../runtime/vish_runtime'
### Foreign requires with -r, --require vishc compiler flag(s)

###

opt=OptionParser.new do |o|
  o.banner = 'ivs - Interactive Vish shell'
  o.separator  ''
  o.on('-r file', '--require file', String, 'Require extra file before starting') do |file|
    require file
  end
  o.separator  ''

  o.on('-h', '--help', 'Displays this help') { puts o; exit() }
  o.on('-v', '--version', 'Display the version of Vish') { puts Vish::VERSION; exit }
end
opt.parse!
### Included files with -i, --include vishc compiler flag(s)

## Included file: ./parser_lib.rb
# parser_lib.rb - module ParserLib
require_relative '../lib/vish'

module ParserLib
  def self.parse(string)
    c = VishCompiler.new string
    c.parse
    c.transform
    c.ast
  end
  ## _emit(AST) :  Given a AST node subtree, return the emitted bytecodes
  def self._emit(ast)
    Semit.new.emit(ast)
  end
end

Dispatch << ParserLib

## end of  file: ./parser_lib.rb

###

ctx = Context.new
bc = ByteCodes.new
### emission of bytecodes
bc.codes = [:cls, :pushl, :mkattr, :pushl, [:pushl, :v, :swp, :set, :drop, :pushl, :k, :swp, :set, :drop], :pushl, [:pushl, :s, :pushv, :k, :pushl, "!", :pushl, 2, :pushl, :cat, :icall, :pushl, 1, :pushv, :mksym, :lcall, :assign, :pushv, :k, :pushl, [], :pushl, [:pushv, :v], :pushl, :Object_3fe6744050d4, :pushl, 3, :pushl, :_mklambda, :icall, :pushl, 2, :pushv, :mkpair, :lcall, :pushv, :s, :pushl, [:pushl, :x, :swp, :set, :drop], :pushl, [:pushl, :v, :pushv, :x, :assign, :pushv, :v], :pushl, :Object_3fe674404a08, :pushl, 3, :pushl, :_mklambda, :icall, :pushl, 2, :pushv, :mkpair, :lcall, :pushl, 2, :pushv, :mkobject, :lcall], :pushl, :Object_3fe67440465c, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :keys, :pushl, [:pushl, :obj, :swp, :set, :drop], :pushl, [:pushv, :obj, :pushl, :keys, :pushl, 2, :pushv, :xmit, :lcall], :pushl, :Object_3fe67440410c, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :values, :pushl, [:pushl, :obj, :swp, :set, :drop], :pushl, [:pushv, :obj, :pushl, :values, :pushl, 2, :pushv, :xmit, :lcall], :pushl, :Object_3fe674401ce0, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :car, :pushl, [:pushl, :l, :swp, :set, :drop], :pushl, [:pushv, :l, :pushl, 1, :pushv, :key, :lcall], :pushl, :Object_3fe674401830, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :cdr, :pushl, [:pushl, :l, :swp, :set, :drop], :pushl, [:pushv, :l, :pushl, 1, :pushv, :value, :lcall], :pushl, :Object_3fe6744013bc, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :cadr, :pushl, [:pushl, :l, :swp, :set, :drop], :pushl, [:pushv, :l, :pushl, 1, :pushv, :cdr, :lcall, :pushl, 1, :pushv, :car, :lcall], :pushl, :Object_3fe674400cdc, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :cddr, :pushl, [:pushl, :l, :swp, :set, :drop], :pushl, [:pushv, :l, :pushl, 1, :pushv, :cdr, :lcall, :pushl, 1, :pushv, :cdr, :lcall], :pushl, :Object_3fe674400688, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :caddr, :pushl, [:pushl, :l, :swp, :set, :drop], :pushl, [:pushv, :l, :pushl, 1, :pushv, :cddr, :lcall, :pushl, 1, :pushv, :car, :lcall], :pushl, :Object_3fe674400124, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :cdddr, :pushl, [:pushl, :l, :swp, :set, :drop], :pushl, [:pushv, :l, :pushl, 1, :pushv, :cddr, :lcall, :pushl, 1, :pushv, :cdr, :lcall], :pushl, :Object_3fe6743ffabc, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :list_length, :pushl, [:pushl, :l, :swp, :set, :drop], :pushl, [:pushv, :l, :pushl, 1, :pushv, :null?, :lcall, :jmprf, 4, :pushl, 0, :fret, :pushl, 1, :pushv, :l, :pushl, 1, :pushv, :cdr, :lcall, :pushl, 1, :pushv, :list_length, :lcall, :add], :pushl, :Object_3fe6743ff134, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :undefined?, :pushl, [:pushl, :key, :swp, :set, :drop], :pushl, [:pushv, :key, :pushl, 0, :pushv, :binding, :lcall, :pushl, 2, :pushv, :_undefined?, :lcall], :pushl, :Object_3fe6743feaa4, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :map, :pushl, [:pushl, :fn, :swp, :set, :drop, :pushl, :coll, :swp, :set, :drop], :pushl, [:pushv, :coll, :pushl, 1, :pushv, :empty?, :lcall, :jmprf, 7, :pushl, 0, :pushl, :mkvector, :icall, :fret, :pushv, :coll, :pushl, 1, :pushv, :head, :lcall, :pushl, 1, :pushv, :fn, :lcall, :pushl, 1, :pushl, :mkvector, :icall, :pushv, :coll, :pushl, 1, :pushv, :tail, :lcall, :pushv, :fn, :pushl, 2, :pushv, :map, :lcall, :add], :pushl, :Object_3fe6743fbd90, :pushl, 3, :pushl, :_mklambda, :icall, :assign, :pushl, :null, :pushl, 0, :pushv, :mknull, :lcall, :assign, :pushl, :version, :pushl, 0, :pushv, :version, :lcall, :assign, :pushl, :argv, :pushl, 0, :pushv, :getargs, :lcall, :assign, :pushv, :argv, :pushl, 1, :pushv, :empty?, :lcall, :jmprf, 3, :jmpr, 45, :pushl, :src, :pushv, :argv, :pushl, 1, :pushv, :head, :lcall, :pushl, 1, :pushv, :fread, :lcall, :assign, :pushv, :src, :pushl, 1, :pushv, :parse, :lcall, :pushl, 1, :pushv, :_emit, :lcall, :pushl, 1, :pushl, :_call, :icall, :pushl, :argv, :pushv, :argv, :pushl, 1, :pushv, :tail, :lcall, :assign, :jmpr, -54, :pushl, "vish>", :pushl, 1, :pushv, :prints, :lcall, :pushl, :src, :pushl, 0, :pushv, :read, :lcall, :assign, :pushv, :src, :pushl, 1, :pushv, :empty?, :lcall, :jmprt, 23, :pushv, :src, :pushl, 1, :pushv, :parse, :lcall, :pushl, 1, :pushv, :_emit, :lcall, :pushl, 1, :pushv, :_call, :lcall, :pushl, 1, :pushv, :print, :lcall, :jmpr, -47, :halt]
###
ci = CodeInterpreter.new bc, ctx

# Main
p ci.run
